#!/bin/bash
# This hook is run after every virtualenv is activated.  It sets a shell alias
# ('manage', by default) to the django manage.py, exports an appropriate value
# for DJANGO_SETTINGS_MODULE, and changes directory into the project's root.

# uncomment set -x and set +x below to turn on bash script debugging
#set -x

# set DJANGO_PROJECTS_SRC_DIR to parent directory of all your project sources.  I use $HOME/src
: "${DJANGO_PROJECTS_SRC_DIR:?"not defined/exported.  Set to parent directory of all your project sources."}" \
    "${VIRTUAL_ENV:?"not defined/exported.  This script is only intended to run as a postactivate hook."}"

# I tie my project name with my virtualenv name.  If you don't you'll need to 
# create a lookup table between virtual env name and django project name
if [[ ! "$(type -t virtual_env_name)" = function ]]
    function virtual_env_name {
        declare virtual_env="${1:?argument missing}"
        basename "$virtual_env"
    }
fi

# export DJANGO_VIRTUALENVWRAPPER_USER in your .bashrc file if your env USER doesn't
# match your settings user (ie you're using vagrant)
declare DJANGO_VIRTUALENVWRAPPER_USER="${DJANGO_VIRTUALENVWRAPPER_USER:-$USER}"

# export DJANGO_MANAGE_PY_ALIAS in your .bashrc file if you'd like to use an alias 
# name other than "manage" 
declare DJANGO_MANAGE_PY_ALIAS="${DJANGO_MANAGE_PY_ALIAS:-manage}"


function determine_django_settings_module {
    declare project_dir="${1:?argument missing}" user="${2?:argument missing}"
 
    declare settings_dir_name="$(find "$project_dir" -name "settings" -type d)"
    declare settings_dir_user= settings_dir_dev=
    if [[ "$settings_dir_name" ]]; then
        settings_dir_user="$(find "$settings_dir_name" -name "$user.py" -type f)"
        settings_dir_dev="$(find "$settings_dir_name" -name "dev.py" -type f)"
    fi

    declare settings_default="$(find "$project_dir" -name "settings.py" -type f)"

    declare django_settings_file=
    for django_settings_file in "$settings_dir_user" "$settings_dir_dev" "$settings_default"
    do
        if [[ "$django_settings_file" ]]
        then
            break
        fi
    done

    declare django_settings_module="${django_settings_file#$project_dir/}"
    django_settings_module="${django_settings_module%.py}"
    django_settings_module="${django_settings_module//\//\./}"

    echo "$django_settings_module"
}

function determine_django_manage_py {
    declare project_dir="${1:?argument missing}"
    find "$project_dir" -name "manage.py" -type f
}


declare django_project_name="$(virtual_env_name "$VIRTUAL_ENV")"
declare django_project_dir="$DJANGO_PROJECTS_SRC_DIR/$django_project_name"
while [[ -h "$django_project_dir" ]]
do
    django_project_dir="$(readlink "$django_project_dir")"
done

declare django_manage_py=
if [[ -d "$django_project_dir" ]]
then
    django_manage_py="$(determine_django_manage_py "$django_project_dir")"
fi

if [[ "$django_manage_py" ]]
then
    declare django_manage_dir="$(dirname "$django_manage_py")"
    export DJANGO_SETTINGS_MODULE="$(determine_django_settings_module \
            "$django_manage_dir" "$DJANGO_VIRTUALENVWRAPPER_USER")"
    alias "$DJANGO_MANAGE_PY_ALIAS=python$(printf ' %q' "$django_manage_py")"
    cd "$django_project_dir"
    unset django_manage_dir
fi

unset django_project_name django_project_dir django_manage_py

#set +x

# uncomment to help debug
#echo "django_project_name: $django_project_name"
#echo "django_user: $django_user"
#echo "django_project_dir: $django_project_dir"
#echo "django_manage_py: $django_manage_py"
#echo "django_settings_module: $django_settings_module"

